* [DONE] spike 'autostrap': automatically strap-on reader methods using normalised name (auto_nominate)
* [DONE] render generic output (sigma.js json) for ingestion -> space-dog
* [DONE] move 'cluster_' prefix to graphviz renderer
* flow / sequence improvements
  [DONE] new flow syntax
  [DONE] opt combined fragments
  - titles
  - alt combined fragments
  - indent text output 
* clean up init options + render attributes - not v clear / overlapping
* make style attributes well defined -> less leaky + explicit graphviz passthroughs
* separate style from domain-specific elements (can use same view-manipulation selection mechanisms)
  - info holds all real / domain attributes
  - style holds all view / representation attributes
* move out any graphviz specifics from main models, e.g. colorize
* move from inheritance -> better encaps
* make everything a thing:
  - things become containers when have other things
  - gets away from "container" which is a bit confusing inline in infra description
  - maybe makes more seamless when collapsing/hiding for different views?
* add sankey diagrams?
* other renderer integrations:
  - plantuml?
  - cyctoscape?
* switch to proper graph lib under covers - this is just a builder + view wrapper... https://github.com/monora/rgl?
* #repeat(count) on containers to give multiple instances, by default expanded (to show each instance)
* ...then can #collapse (1 instance showing, number labelled) 
* ...then can #template or #prototype or ?? (1 instance detailed, rest simplified)
* ...make count of repeat be complex e.g. to show auto-scaling, 1 per customer etc. etc.
* make render 2 stages (rollups + repeats, then render) enabling:
  - render multiple views from same dog instance
  - separate and simplify rollup logic, which is a bit complex
  - pave way for simplified repeat expansion logic, which is similarly complex (+ almost the reverse)
  - pave way for cleaning graphviz specifics out of main dog ('cluster_', subgraphs)
* edge attributes?
  i - pass on any attributes passed as _graphviz: on to graphviz renderer for relevant entity
  ii - map in simpler named attributes 
      - color -> edge + font color
      - stroke -> edge size and font size
* render to d3 force directed graph
* plantuml flow render
  - can include images
  - has more control
  - can render locally
* "rollup edges": where many edges from a node, rollup those to certain destination (e.g. from 'website' to all 
   in '3rd party' container) so that not so crowded around source (would add extra view node nearer target)
* "via": app -> service, via: load_balancer... then can omit load_balancer and get direct app -> service connection 
* capture arbitrary info
   - filter primitives for views
   - default info_level to 'all', could be set to 'none'
   - info_level applies to:
     - entire view by default
     - specified per node
     - optionally inherited?
   - allow nodes to assign summary fields? then could be set to 'summary'
* sort out fore vs back color
